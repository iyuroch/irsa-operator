package aws

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/aws/aws-sdk-go-v2/service/iam"
)

// +kubebuilder:object:generate=true
// +kubebuilder:validation:Required

// PolicyDocument provides struct for iam policy
type PolicyDocument struct {
	Version   string
	Statement []StatementEntry
}

// +kubebuilder:object:generate=true
// +kubebuilder:validation:Required

// StatementEntry provides struct for iam statement
type StatementEntry struct {
	Effect   string   `json:"Effect"`
	Action   []string `json:"Action"`
	Resource string   `json:"Resource"`
}

// IIAMReconciler provides interface to mock IAMReconciler
type IIAMReconciler interface {
	CreatePolicy(ctx context.Context, name string,
		policyDoc *string) (string, error)
	Delete(ctx context.Context, name string) error
}

// IAMReconciler implement creation and deletion of the policy
type IAMReconciler struct {
	IAMClient IIAMClient
}

const policyVersion = "2012-10-17"

// GeneratePolicy generates policy from passed name, description and statements
// it will return string representation of json which should match
// https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies.html
func GeneratePolicy(statementEntries *[]StatementEntry) (*string, error) {
	policy := PolicyDocument{
		Version:   policyVersion,
		Statement: *statementEntries,
	}

	jsonData, err := json.Marshal(policy)
	if err != nil {
		return nil, err
	}

	jsonString := string(jsonData)
	return &jsonString, nil
}

// GeneratePolicyName generates policy name
// it should be unique in the AWS account
func GeneratePolicyName(name string, namespace string, uid string) string {
	return fmt.Sprintf("%s-%s-%s", name, namespace, uid)
}

const defaultDescription = "auto generated by irsa operator"

// Delete deletes policy by name
func (reconc *IAMReconciler) Delete(ctx context.Context, policyArn string) error {
	deletePolicyInput := &iam.DeletePolicyInput{
		PolicyArn: &policyArn,
	}

	_, err := reconc.IAMClient.DeletePolicy(ctx, deletePolicyInput)
	if err != nil {
		return fmt.Errorf("cannot delete policy: %w", err)
	}

	return nil
}

// CreatePolicy create policy according to provided name descipriton and statements
// it will return wrapped error in case cannot generate
func (reconc *IAMReconciler) CreatePolicy(ctx context.Context, name string,
	policyDoc *string) (policyArn string, err error) {
	descr := defaultDescription
	createPolicyInput := &iam.CreatePolicyInput{
		PolicyName:     &name,
		PolicyDocument: policyDoc,
		Description:    &descr,
	}

	createPolicyOutput, err := reconc.IAMClient.CreatePolicy(ctx, createPolicyInput)
	if err != nil {
		return "", fmt.Errorf("cannot creating iam policy %w", err)
	}

	return *createPolicyOutput.Policy.Arn, nil
}
