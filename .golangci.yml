---
run:
  ## we are not yet using generics
  ## see also: https://github.com/golangci/golangci-lint/issues/2649
  go: '1.20'

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 3m

  skip-dirs: []

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported.
  skip-files:
    - "^.+\\.pb\\.go$"
    - "^.+\\.gen\\.go$"

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  modules-download-mode: mod


linters:
  disable-all: true
  enable:
    # Default
    - errcheck
    - gosimple
    - govet
    - ineffassign
    - staticcheck
    - typecheck
    # Custom
    - asciicheck
    - bodyclose
    - dupl
    - durationcheck
    - errorlint
    - exhaustive
    - exportloopref
    - forcetypeassert
    - funlen
    - goconst
    - gocritic
    - gocyclo
    - goerr113
    - gofmt
    - gosec
    - lll
    - misspell
    - nakedret
    - nilerr
    - noctx
    - nolintlint
    - prealloc
    - predeclared
    - revive
    - rowserrcheck
    - sqlclosecheck
    - thelper
    - tparallel
    - unconvert
    - unparam
    - wastedassign
    # Disabled
    # - paralleltest
    # - exhaustivestruct  # generates to many nolint
    # - golint            # revive is used instead
    # - makezero          # not needed
    # - importas          # not needed
    # - gomoddirectives   # not needed
    # - forbidigo         # not used now, may be enabled later
    # - cyclop            # gocyclo used instead
    # - unused            # gives tons of false-positives
    # - gofumpt           # gofmt is good enough already
    # - stylecheck        # golint is good enough already
    # - gocognit          # absolutely useless - all services/controllers are reported
    # - goimports         # gofmt is good enough already
    # - goheader          # we don't have such requirement
    # - gci               # no need
    # - depguard          # no need
    # - dogsled           # no need
    # - scopelint         # deprecated
    # - gochecknoinits    # sometimes they are needed
    # - gochecknoglobals  # sometimes they are needed
    # - godox             # we will use bots that will handle that
    # - whitespace        # style is up to developer
    # - wsl               # style is up to developer
    # - goprintffuncname  # no need
    # - gomodguard        # no need
    # - godot             # no need
    # - nlreturn          # style is up to developer
    # - gomnd             # good in theory, not always good in practice
    # - nestif            # useless most of the time
    # - maligned          # deprecated
    # - interfacer        # deprecated

# all available settings of specific linters
linters-settings:

  govet:
    enable-all: true
    disable:
      - fieldalignment
      - shadow

  dupl:
    # tokens count to trigger issue, 150 by default
    threshold: 300

  funlen:
    lines: 150
    statements: 75

  gocritic:
    enabled-tags:
      - diagnostic
      - performance
      - style
    disabled-checks:
      - paramTypeCombine  # style is up to developer

    settings:
      hugeParam:
        sizeThreshold: 100

  gocyclo:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 30

  lll:
    line-length: 140

  misspell:
    locale: US
    ignore-words:
      - firebolt

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns;
    # default is 30
    max-func-lines: 1

  exhaustive:
    # indicates that switch statements are to be considered exhaustive if a
    # 'default' case is present, even if all enum members aren't listed in the
    # switch
    default-signifies-exhaustive: true

issues:
  exclude-use-default: false
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    # revive: Expect package comments. Too much work to implement now
    - "package-comments: should have a package comment"
    # Conflict in comments with expected gofmt output
    - "directive .* should be written without leading space as .*"
    # errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*printf?|os\.(Un)?Setenv). is not checked
    # golint: False positive when tests are defined in package 'test'
    - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this
    # govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)
    # staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - ineffective break statement. Did you mean to break out of the outer loop
    # gosec: Too many false-positives on 'unsafe' usage
    - Use of unsafe calls should be audited
    # gosec: Too many false-positives for parametrized shell calls
    - Subprocess launch(ed with variable|ing should be audited)
    # gosec: Duplicated errcheck checks
    - G104
    # gosec: Too many issues in popular repos
    - (Expect directory permissions to be 0750 or less|Expect file permissions to be 0600 or less)
    # gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - Potential file inclusion via variable
    # Disable Id renaming to ID
    - "method .*Id.* should be .*ID.*"
    - "var .*Id.* should be .*ID.*"
    - "func .*Id.* should be .*ID.*"
    - "struct field .*Id.* should be .*ID.*"
    - "var-naming: const .*Id.* should be .*ID.*"
    # useless and harmful lint
    - "sloppyReassign: re-assignment to"
    # we use such errors for validation
    - "do not define dynamic errors, use wrapped static errors instead"

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: _test\.go
      linters:
        - lll
        - dupl
        - gomnd
        - funlen
        - goconst
        - dogsled
        - exhaustivestruct
        - gocyclo
        - prealloc
        - gosec
        - forcetypeassert
